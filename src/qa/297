#! /bin/sh
# PCP QA Test No. 297
# exercise pmproxy and client reconnect
#
# Copyright (c) 2005 Silicon Graphics, Inc.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

which pmdumptext >/dev/null 2>&1 || \
    _notrun "No pmdumptext binary installed"
which pmproxy >/dev/null 2>&1 || \
    _notrun "No pmproxy binary installed"

PMCDLOG=$PCP_LOG_DIR/pmcd/pmcd.log

status=0	# success is the default!
signal=$PCP_BINADM_DIR/pmsignal
killpid=""
username=`id -u -n`
$sudo rm -rf $tmp.* $seq.full
trap "_cleanup; rm -rf $tmp.*; exit \$status" 0 1 2 3 15
_stop_auto_restart pmcd
_stop_auto_restart pmlogger

_cleanup()
{
    [ -n "$killpid" ] && $signal $killpid
    $sudo $signal -a pmproxy >>$seq.full 2>&1
    _service pmproxy restart >>$seq.full 2>&1
}

realname=`hostname`
chopname=`echo $realname | sed -e 's/\..*//'`

_filter()
{
    sed \
	-e '/^pmWhichContext/d' \
	-e '/^pmUseContext/d' \
	-e '/^pmNewZone/d' \
	-e '/^pmUseZone/d' \
	-e '/^__pmFdLookup/d' \
	-e '/^__pmDecodeXtendError/d' \
	-e '/^__pmAddIPC/d' \
	-e '/^__pmSendCreds/d' \
	-e '/^IPC table/d' \
	-e '/^__pmConnectPMCD.* failed/d' \
	-e '/^__pmConnect(fd=[0-9][0-9]*(nsprFd=/d' \
	-e '/^contexts\[/{
s/fd=[0-9][0-9]*/fd=N/
}' \
	-e '/^__pmConnectPMCD/{
s/'$realname'/MY_HOST/g
s/localhost\.localdomain/MY_HOST/g
s/localhost/MY_HOST/g
s/'$chopname'/MY_HOST/g
s/[0-9][0-9]*/N/g
}' \
	-e '/^pmReconnectContext.* failed/d' \
	-e '/^pmReconnectContext.* too soon/d' \
	-e '/^pmNewContext/{
s/'$realname'/MY_HOST/g
s/'$chopname'/MY_HOST/g
}' \
	-e '/^Context\[/{
s/'$realname'/MY_HOST/g
s/'$chopname'/MY_HOST/g
s/[0-9][0-9]*/N/g
}' \
	-e '/^[A-Z][a-z][a-z] [A-Z][a-z][a-z]  *[0-9][0-9]* [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/{
# pmdumptext
s//DATE/
s/	[0-9][0-9.]*/	N/g
}' \
    | _filter_pmproxy | uniq
}

_filter_pmproxy()
{
    sed -e '/^__pmSetSocketIPC: fd=/d' \
        -e '/^__pmSetDataIPC: fd=/d' \
        -e '/^__pmDataIPC: fd=/d' \
        -e '/^IPC table fd/d' \
	-e '/^__pmSetVersionIPC: fd=/d' \
	-e '/^__pmSetFeaturesIPC: fd=/d' \
	-e 's/localhost/MY_HOST/g'
}

_service pmproxy stop >>$seq.full 2>&1
$sudo $signal -a pmproxy >>$seq.full 2>&1

OLD_PCP_RUN_DIR=$PCP_RUN_DIR
mkdir -p $tmp.rundir
export PCP_RUN_DIR=$tmp.rundir
proxyargs="-Dcontext -U $username"
$PCP_BINADM_DIR/pmproxy $proxyargs -l $tmp.log 2>&1 | _filter_pmproxy

# real QA test starts here
export PMPROXY_HOST=localhost
export PMCD_RECONNECT_TIMEOUT=1
pmdumptext -Dcontext -t 0.5 sample.bin >$tmp.out 2>&1 &
killpid=$!

# don't need to confuse pmproxy or pmcd ...
#
unset PMPROXY_HOST

sleep 3
echo "killing pmproxy ..."
$signal -a pmproxy >>$seq.full 2>&1
sleep 2
echo "1st pmproxy log" >$seq.full
cat $tmp.log >>$seq.full

echo "re-starting pmproxy ..."
$PCP_BINADM_DIR/pmproxy $proxyargs -l $tmp.log 2>&1 | _filter_pmproxy

sleep 4
primary_logger_pid=`$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep pmlogger | grep ' -P' | $PCP_AWK_PROG '{ print $2 }'`
if [ -z "$primary_logger_pid" ]
then
    echo "Argh! primary pmlogger not running?"
    exit
fi
echo "killing pmcd ..." | tee -a $seq.full
_service pmlogger stop >>$seq.full 2>&1
_wait_pmlogger_end $primary_logger_pid
_service pmcd stop >>$seq.full 2>&1
_wait_pmcd_end
echo >>$seq.full
echo "1st pmcd log" >>$seq.full
cat $PMCDLOG >>$seq.full

echo "re-starting pmcd ..." | tee -a $seq.full
export PCP_RUN_DIR=$OLD_PCP_RUN_DIR
_service pmcd start >>$seq.full 2>&1
_restore_auto_restart pmcd
_service pmlogger start >>$seq.full 2>&1
_restore_auto_restart pmlogger
_wait_for_pmcd
_wait_for_pmlogger

echo >>$seq.full
echo "2nd pmproxy log" >>$seq.full
cat $tmp.log >>$seq.full
echo >>$seq.full
echo "2nd pmcd log" >>$seq.full
cat $PMCDLOG >>$seq.full

echo >>$seq.full
echo "pmdumptext output" >>$seq.full
cat $tmp.out >>$seq.full

_filter <$tmp.out

# success, all done
exit
