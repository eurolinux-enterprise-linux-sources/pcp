""" Test metric value extraction/reporting using the pcp.pmcc module """
#
# Copyright (C) 2013 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import sys
import time
import unittest
from pcp import pmcc
import cpmapi as c_api

ARCHIVE = ""
CPU_METRICS = [ "kernel.all.cpu.sys", "kernel.all.cpu.user",
                "kernel.all.cpu.nice", "kernel.all.cpu.idle", ]
MEM_METRICS = [ "mem.physmem", "mem.freemem", ]
DISK_METRICS = [ "disk.all.read", "disk.all.write", ]


def cpu_print(group):
    """ Report on processor metric group """
    ticks = {}
    total = 0.0
    for name in CPU_METRICS:
        metric = group[name]
        values = dict(map(lambda x: (x[1], x[2]), metric.netValues))
        prevs = dict(map(lambda x: (x[1], x[2]), metric.netPrevValues))
        inst_val = reduce(lambda x, y: x + y,
               map( lambda x: values[x] - prevs[x], values.keys()))
        ticks.update({ name : inst_val })
        total += inst_val
    for name in CPU_METRICS:
        print "   ", name, round(ticks[name] / total * 100, 2), "%"

def mem_print(group):
    """ Report on memory metric group """
    for name in MEM_METRICS:
        metric = group[name]
        values = dict(map(lambda x: (x[1], x[2]), metric.netValues))
    
        for inst_name in values.keys():
            inst_val = values[inst_name] 
            unit_str = metric.ctx.pmUnitsStr(metric.desc.units)
            print "   ", name, inst_val, unit_str

def disk_print(group):
    """ Report on disk metric group """
    for name in DISK_METRICS:
        metric = group[name]
        values = dict(map(lambda x: (x[1], x[2]), metric.netValues))
    
        for inst_name in values.keys():
            inst_val = values[inst_name] 
            unit_str = metric.ctx.pmUnitsStr(metric.desc.units)
            print "   ", name, inst_val, unit_str

def metric_fetch(mgm):
    """ Extract latest values from group manager """
    for k in mgm.keys():
        mgm[k].mgFetch()

def metric_print(mgm):
    """ Report latest values from group manager """
    print mgm.target
    cpu_print(mgm["cpu"])
    mem_print(mgm["mem"])
    disk_print(mgm["disk"])


class TestConvenienceClasses(unittest.TestCase):
    """
    Test driver class for pcp.pmcc module verification
    """

    def test_context(self):
        """ Wrapper for test_pmcc helper which does the heavy lifting """
        # MetricGroupManager -> MetricCache -> pmContext

        if (ARCHIVE == ""):
            mgm = pmcc.MetricGroupManager()
        else:
            mgm = pmcc.MetricGroupManager(c_api.PM_CONTEXT_ARCHIVE, ARCHIVE)
        self.assertTrue(mgm != None)
        mgm["cpu"] = CPU_METRICS
        mgm["mem"] = MEM_METRICS
        mgm["disk"] = DISK_METRICS

        metric_fetch(mgm)
        if (ARCHIVE == ""):
            time.sleep(1)
        metric_fetch(mgm)

        metric_print(mgm)


if __name__ == '__main__':
    if (len(sys.argv) == 2):
        ARCHIVE = sys.argv[1]
    elif (len(sys.argv) > 2):
        print "Usage: " + sys.argv[0] + " [archive]"
        sys.exit(1)

    sys.argv[1:] = ()
    STS = unittest.main()
    sys.exit(STS)
