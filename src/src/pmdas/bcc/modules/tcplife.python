#
# Copyright (C) 2017-2018 Marko Myllynen <myllynen@redhat.com>
# Copyright (C) 2018 Andreas Gerstmayr <andreas@gerstmayr.me>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
""" PCP BCC PMDA biotop module """

# Configuration options
# Name - type - default
#
# process           - string - unset : list of names/pids or regex of processes to monitor
# dport             - int    - unset : list of remote ports to monitor
# lport             - int    - unset : list of local ports to monitor
# session_count     - int    - 20    : number of closed TCP sessions to keep in the cache
# buffer_page_count - int    - 64    : number of pages for the perf ring buffer, power of two

# pylint: disable=invalid-name,too-few-public-methods,too-many-instance-attributes

import ctypes as ct
from collections import deque
from threading import Lock, Thread
from socket import inet_ntop, AF_INET, AF_INET6
from struct import pack
from os import path

from bcc import BPF

from pcp.pmapi import pmUnits
from cpmapi import PM_TYPE_U32, PM_TYPE_U64, PM_TYPE_STRING, PM_SEM_INSTANT
from cpmapi import PM_SPACE_BYTE, PM_TIME_USEC, PM_ERR_AGAIN

from modules.pcpbcc import PCPBCCBase

#
# BPF program
#
bpf_src = "modules/tcplife.bpf"
# Compat with kernel < 4.16, bcc < 0.6
TRACEFS = "/sys/kernel/debug/tracing"
bpf_src_old_tp = "modules/tcplife_old_tp.bpf"
bpf_src_old_kb = "modules/tcplife_old_kb.bpf"
if not path.exists(TRACEFS + "/events/sock/inet_sock_set_state"):
    if path.exists(TRACEFS + "/events/tcp/tcp_set_state"):
        bpf_src = bpf_src_old_tp
    else:
        bpf_src = bpf_src_old_kb

#
# PCP BCC PMDA constants
#
MODULE = 'tcplife'
BASENS = 'proc.io.net.tcp.'
units_bytes = pmUnits(1, 0, 0, PM_SPACE_BYTE, 0, 0)
units_usecs = pmUnits(0, 1, 0, 0, PM_TIME_USEC, 0)
units_none = pmUnits(0, 0, 0, 0, 0, 0)

TASK_COMM_LEN = 16      # linux/sched.h

class Data_ipv4(ct.Structure):
    """ IPv4 data struct """
    _fields_ = [
        ("ts_us", ct.c_ulonglong),
        ("pid", ct.c_ulonglong),
        ("saddr", ct.c_ulonglong),
        ("daddr", ct.c_ulonglong),
        ("ports", ct.c_ulonglong),
        ("rx_b", ct.c_ulonglong),
        ("tx_b", ct.c_ulonglong),
        ("span_us", ct.c_ulonglong),
        ("task", ct.c_char * TASK_COMM_LEN)
    ]

class Data_ipv6(ct.Structure):
    """ IPv6 data struct """
    _fields_ = [
        ("ts_us", ct.c_ulonglong),
        ("pid", ct.c_ulonglong),
        ("saddr", (ct.c_ulonglong * 2)),
        ("daddr", (ct.c_ulonglong * 2)),
        ("ports", ct.c_ulonglong),
        ("rx_b", ct.c_ulonglong),
        ("tx_b", ct.c_ulonglong),
        ("span_us", ct.c_ulonglong),
        ("task", ct.c_char * TASK_COMM_LEN)
    ]

#
# PCP BCC Module
#
class PCPBCCModule(PCPBCCBase):
    """ PCP BCC biotop module """
    def __init__(self, config, log, err):
        """ Constructor """
        PCPBCCBase.__init__(self, MODULE, config, log, err)

        self.pids = []
        self.dports = []
        self.lports = []
        self.session_count = 20
        self.buffer_page_count = 64

        for opt in self.config.options(MODULE):
            if opt == 'dport':
                self.dports = [int(port) for port in self.config.get(MODULE, opt).split(",")]
                self.log("Filtering on remote ports: %s." % str(self.dports))
            if opt == 'lport':
                self.lports = [int(port) for port in self.config.get(MODULE, opt).split(",")]
                self.log("Filtering on local ports: %s." % str(self.lports))
            if opt == 'process':
                val = self.config.get(MODULE, opt)
                procs = self.get_proc_info(val)
                if not procs:
                    self.log("No matching PIDs found for %s, PID filtering disabled." % val)
                for proc in procs:
                    self.log("Tracing PID %s: %s %s." % (str(proc[0]), proc[1], proc[2]))
                    self.pids.append(proc[0])
            if opt == 'session_count':
                self.session_count = int(self.config.get(MODULE, opt))
            if opt == 'buffer_page_count':
                self.buffer_page_count = int(self.config.get(MODULE, opt))
                if not self.buffer_page_count or \
                   self.buffer_page_count & (self.buffer_page_count - 1):
                    raise RuntimeError("Buffer page count is not power of two.")

        self.cache = deque(maxlen=self.session_count)
        self.insts = {str(i) : ct.c_int(1) for i in range(0, self.session_count)}

        self.lock = Lock()
        self.thread = Thread(name="bpfpoller", target=self.poller)
        self.thread.setDaemon(True)

        # Compat with kernel < 4.16
        self.log("Using BPF source file %s." % bpf_src)

        self.log("Initialized.")

    def poller(self):
        """ BPF poller """
        try:
            # pylint: disable=no-member
            if 'perf_buffer_poll' in dir(self.bpf):
                poll = self.bpf.perf_buffer_poll
            else:
                # Compat: bcc < 0.6.0
                poll = self.bpf.kprobe_poll
            while self.bpf:
                poll()
        except Exception as error: # pylint: disable=broad-except
            self.err(str(error))
            self.err("BPF kprobe poll failed!")
        self.log("Poller thread exiting.")

    def handle_ip_event(self, data, version):
        """ IP event handler """
        if version == 4:
            event = ct.cast(data, ct.POINTER(Data_ipv4)).contents
            laddr = inet_ntop(AF_INET, pack("I", event.saddr))
            raddr = inet_ntop(AF_INET, pack("I", event.daddr))
        else:
            event = ct.cast(data, ct.POINTER(Data_ipv6)).contents
            laddr = inet_ntop(AF_INET6, event.saddr)
            raddr = inet_ntop(AF_INET6, event.daddr)

        self.lock.acquire()
        self.cache.appendleft([
            event.pid,
            event.task.decode(),
            laddr,
            event.ports >> 32,
            raddr,
            event.ports & 0xffffffff,
            event.tx_b,
            event.rx_b,
            event.span_us
        ])
        self.lock.release()

    def handle_ipv4_event(self, _cpu, data, _size):
        """ IPv4 event handler """
        self.handle_ip_event(data, 4)

    def handle_ipv6_event(self, _cpu, data, _size):
        """ IPv6 event handler """
        self.handle_ip_event(data, 6)

    def metrics(self):
        """ Get metric definitions """
        name = BASENS
        self.items = (
            # Name - reserved - type - semantics - units - help
            (name + 'pid', None, PM_TYPE_U32, PM_SEM_INSTANT, units_none, 'PID'),
            (name + 'comm', None, PM_TYPE_STRING, PM_SEM_INSTANT, units_none, 'command'),
            (name + 'laddr', None, PM_TYPE_STRING, PM_SEM_INSTANT, units_none, 'local address'),
            (name + 'lport', None, PM_TYPE_U32, PM_SEM_INSTANT, units_none, 'local port'),
            (name + 'daddr', None, PM_TYPE_STRING, PM_SEM_INSTANT, units_none, 'destination ' \
                'address'),
            (name + 'dport', None, PM_TYPE_U32, PM_SEM_INSTANT, units_none, 'destination port'),
            (name + 'tx', None, PM_TYPE_U64, PM_SEM_INSTANT, units_bytes, 'transmitted data'),
            (name + 'rx', None, PM_TYPE_U64, PM_SEM_INSTANT, units_bytes, 'received data'),
            (name + 'duration', None, PM_TYPE_U32, PM_SEM_INSTANT, units_usecs, 'duration of ' \
                'the TCP session (from TCP_ESTABLISHED/TCP_SYN_* until TCP_CLOSE)'),
        )
        return True, self.items

    def perf_buffer_lost_cb(self, lost_cnt):
        """ Callback for lost perf buffer events """
        self.err("Lost %d events; buffer_page_count should be increased." % lost_cnt)

    def compile(self):
        """ Compile BPF """
        try:
            # Compat with bcc < 0.6
            self.log("Testing BCC compatilibility, possible errors below are safe to ignore.")
            with open(path.dirname(__file__) + '/../' + bpf_src) as src:
                bpf_text = src.read()
            try:
                test_txt = bpf_text.replace("// NEW: ", "")
                test_bpf = BPF(text=test_txt)
                test_bpf.cleanup()
                bpf_text = test_txt
            except Exception: # pylint: disable=broad-except
                bpf_text = bpf_text.replace("// OLD: ", "")
            self.log("Tested BCC compatilibility, possible errors above are safe to ignore.")

            bpf_text = self.apply_pid_filter(bpf_text, self.pids, False)

            if self.dports:
                filterp = " && ".join(["dport != %d" % port for port in self.dports])
                filter_txt = "if (%s) { birth.delete(&sk); return 0; }" % filterp
                bpf_text = bpf_text.replace("//FILTER_DPORT", filter_txt)
            if self.lports:
                filterp = " && ".join(["lport != %d" % port for port in self.lports])
                filter_txt = "if (%s) { birth.delete(&sk); return 0; }" % filterp
                bpf_text = bpf_text.replace("//FILTER_LPORT", filter_txt)

            if self.debug:
                self.log("BPF to be compiled:")
                self.log("\n" + bpf_text)

            self.bpf = BPF(text=bpf_text)
            self.bpf["ipv4_events"].open_perf_buffer(self.handle_ipv4_event,
                                                     page_cnt=self.buffer_page_count,
                                                     lost_cb=self.perf_buffer_lost_cb)
            self.bpf["ipv6_events"].open_perf_buffer(self.handle_ipv6_event,
                                                     page_cnt=self.buffer_page_count,
                                                     lost_cb=self.perf_buffer_lost_cb)
            self.thread.start()
            self.log("Compiled.")
        except Exception as error: # pylint: disable=broad-except
            self.bpf = None
            self.err(str(error))
            self.err("Module NOT active!")
            raise

    def refresh(self):
        """ Refresh BPF data """
        if self.bpf is None:
            return None

        return self.insts

    def bpfdata(self, item, inst):
        """ Return BPF data as PCP metric value """
        try:
            self.lock.acquire()
            key = int(self.pmdaIndom.inst_name_lookup(inst))
            value = self.cache[key][item]
            self.lock.release()
            return [value, 1]
        except Exception: # pylint: disable=broad-except
            self.lock.release()
            return [PM_ERR_AGAIN, 0]
