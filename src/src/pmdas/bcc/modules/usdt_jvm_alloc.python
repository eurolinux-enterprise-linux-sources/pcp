#
# Copyright (C) 2018 Marko Myllynen <myllynen@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
""" PCP BCC PMDA USDT JVM allocation profile module """

# pylint: disable=invalid-name, too-many-instance-attributes

from platform import architecture
from ctypes import c_int
from os import path

from bcc import BPF, USDT

from pcp.pmapi import pmUnits
from cpmapi import PM_TYPE_U64, PM_SEM_COUNTER, PM_SPACE_BYTE
from cpmda import PMDA_FETCH_NOVALUES

from modules.pcpbcc import PCPBCCBase

#
# BPF program
#
bpf_src = "modules/usdt_jvm_alloc.bpf"

#
# PCP BCC PMDA constants
#
MODULE = 'usdt_jvm_alloc'
METRIC = 'usdt.jvm.alloc'
units_bytes = pmUnits(1, 0, 0, PM_SPACE_BYTE, 0, 0)

#
# PCP BCC Module
#
class PCPBCCModule(PCPBCCBase):
    """ PCP BCC USDT JVM allocations module """
    def __init__(self, config, log, err, proc_refresh):
        """ Constructor """
        PCPBCCBase.__init__(self, MODULE, config, log, err)

        self.pid = None
        self.proc_filter = None
        self.proc_refresh = proc_refresh

        self.cache = None
        self.freq = 0
        self.jvm_path = "/etc/alternatives/jre/lib/server/libjvm.so"
        self.usdt_contexts = []

        for opt in self.config.options(MODULE):
            if opt == 'frequency':
                self.freq = int(self.config.get(MODULE, opt))
                if self.freq and self.freq & (self.freq - 1):
                    raise RuntimeError("Frequency is not power of two.")
            if opt == 'jvm_path':
                self.jvm_path = self.config.get(MODULE, opt)
            if opt == 'process':
                self.proc_filter = self.config.get(MODULE, opt)
                self.update_pids(self.get_proc_info(self.proc_filter))

        if not self.proc_filter:
            # https://github.com/iovisor/bcc/issues/1774
            raise RuntimeError("Process filter is mandatory.")

        self.log("Initialized.")

    def metrics(self):
        """ Get metric definitions """
        name = METRIC
        self.items.append(
            # Name - reserved - type - semantics - units - help
            (name, None, PM_TYPE_U64, PM_SEM_COUNTER, units_bytes, 'alloc'),
        )
        return True, self.items

    def reset_cache(self):
        """ Reset internal cache """
        self.cache = {}

    def undef_cache(self):
        """ Undefine internal cache """
        self.cache = None

    def compile(self):
        """ Compile BPF """
        try:
            if not self.pid and self.proc_filter and not self.proc_refresh:
                # https://github.com/iovisor/bcc/issues/1774
                raise RuntimeError("No process to attach found.")

            if not self.bpf_text:
                with open(path.dirname(__file__) + '/../' + bpf_src) as src:
                    self.bpf_text = src.read()

                if self.freq:
                    init_filter = "u64 *count = samples.lookup_or_init(&zero, &zero);"
                    sample_filter = "if (++(*count) & %d) return 0;" % (self.freq - 1)
                    self.bpf_text = self.bpf_text.replace("//FILTER_INIT", init_filter)
                    self.bpf_text = self.bpf_text.replace("//FILTER_SAMPLE", sample_filter)
                if architecture()[0] == "64bit":
                    self.bpf_text = self.bpf_text.replace("JVM_WORDSIZE N", "JVM_WORDSIZE 8")
                else:
                    self.bpf_text = self.bpf_text.replace("JVM_WORDSIZE N", "JVM_WORDSIZE 4")

            if not self.pid and self.proc_filter and self.proc_refresh:
                self.log("No process to attach found, activation postponed.")
                return

            self.usdt_contexts = []
            usdt = USDT(pid=self.pid)
            usdt.enable_probe("object__alloc", "trace_jvm_object_alloc")
            self.usdt_contexts.append(usdt)

            if self.debug:
                self.log("BPF to be compiled:\n" + self.bpf_text.strip())

            self.reset_cache()
            self.bpf = BPF(text=self.bpf_text, usdt_contexts=self.usdt_contexts)
            self.log("Compiled.")
        except Exception as error: # pylint: disable=broad-except
            self.bpf = None
            self.undef_cache()
            self.err(str(error))
            self.err("Module NOT active!")
            raise

    def refresh(self):
        """ Refresh BPF data """
        if self.bpf is None:
            return None

        for k, v in self.bpf["classes"].items():
            key = self.parse_inst_name(k.name.decode("ASCII", "replace"))
            self.cache[key] = v.value
            self.insts[key] = c_int(1)

        return self.insts

    def bpfdata(self, item, inst):
        """ Return BPF data as PCP metric value """
        try:
            key = self.pmdaIndom.inst_name_lookup(inst)
            return [self.cache[key], 1]
        except Exception: # pylint: disable=broad-except
            return [PMDA_FETCH_NOVALUES, 0]
